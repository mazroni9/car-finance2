const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://uhdopxhxmrxwystnbmmp.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVoZG9weGh4bXJ4d3lzdG5ibW1wIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MDQxMzU5NywiZXhwIjoyMDY1OTg5NTk3fQ.VtG_dOMBD-_k8AVZVBP7Ch_cEpa9HQcKhqhS6K7IoEE';
const supabase = createClient(supabaseUrl, supabaseKey);

async function addBaseProfitColumn() {
    try {
        console.log('üîç ÿ¨ÿßÿ±Ÿä ÿ•ÿ∂ÿßŸÅÿ© ÿπŸÖŸàÿØ base_profit ÿ•ŸÑŸâ ÿ¨ÿØŸàŸÑ installment_rules...\n');

        // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ Ÿàÿ¨ŸàÿØ ÿßŸÑÿπŸÖŸàÿØ ÿ£ŸàŸÑÿßŸã
        const { data: existingData, error: checkError } = await supabase
            .from('installment_rules')
            .select('*')
            .limit(1);

        if (checkError) {
            console.log('‚ùå ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑŸàÿµŸàŸÑ ŸÑÿ¨ÿØŸàŸÑ installment_rules:', checkError.message);
            return;
        }

        if (existingData && existingData.length > 0) {
            const firstRecord = existingData[0];
            
            // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ Ÿàÿ¨ŸàÿØ ÿπŸÖŸàÿØ base_profit
            if ('base_profit' in firstRecord) {
                console.log('‚úÖ ÿπŸÖŸàÿØ base_profit ŸÖŸàÿ¨ŸàÿØ ÿ®ÿßŸÑŸÅÿπŸÑ');
                console.log('üìä ŸÇŸäŸÖÿ© base_profit ŸÅŸä ÿßŸÑÿ≥ÿ¨ŸÑ ÿßŸÑÿ£ŸàŸÑ:', firstRecord.base_profit);
            } else {
                console.log('‚ùå ÿπŸÖŸàÿØ base_profit ÿ∫Ÿäÿ± ŸÖŸàÿ¨ŸàÿØ');
                console.log('üîß ÿ≥Ÿäÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ™Ÿá ÿπÿ®ÿ± SQL ŸÖÿ®ÿßÿ¥ÿ±ÿ©');
                
                // ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿπŸÖŸàÿØ ÿπÿ®ÿ± SQL
                const { error: alterError } = await supabase.rpc('exec_sql', {
                    sql: `
                        -- ÿ•ÿ∂ÿßŸÅÿ© ÿπŸÖŸàÿØ base_profit ÿ•ÿ∞ÿß ŸÑŸÖ ŸäŸÉŸÜ ŸÖŸàÿ¨ŸàÿØ
                        DO $$ 
                        BEGIN
                            IF NOT EXISTS (
                                SELECT 1 FROM information_schema.columns 
                                WHERE table_name = 'installment_rules' 
                                AND column_name = 'base_profit'
                            ) THEN
                                ALTER TABLE installment_rules ADD COLUMN base_profit NUMERIC(12,2);
                                RAISE NOTICE 'ÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ© ÿπŸÖŸàÿØ base_profit';
                            ELSE
                                RAISE NOTICE 'ÿπŸÖŸàÿØ base_profit ŸÖŸàÿ¨ŸàÿØ ÿ®ÿßŸÑŸÅÿπŸÑ';
                            END IF;
                        END $$;
                        
                        -- ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖŸàÿ¨ŸàÿØÿ© ÿ®ÿ≠ÿ≥ÿßÿ® base_profit
                        UPDATE installment_rules 
                        SET base_profit = price_category * profit_target_percent
                        WHERE base_profit IS NULL;
                        
                        -- ÿ¨ÿπŸÑ ÿßŸÑÿπŸÖŸàÿØ NOT NULL ÿ®ÿπÿØ ÿßŸÑÿ™ÿ≠ÿØŸäÿ´
                        ALTER TABLE installment_rules ALTER COLUMN base_profit SET NOT NULL;
                    `
                });

                if (alterError) {
                    console.log('‚ùå ÿÆÿ∑ÿ£ ŸÅŸä ÿ•ÿ∂ÿßŸÅÿ© ÿßŸÑÿπŸÖŸàÿØ:', alterError.message);
                    console.log('üí° Ÿäÿ¨ÿ® ÿ™ÿ¥ÿ∫ŸäŸÑ SQL ŸäÿØŸàŸäÿßŸã ŸÅŸä Supabase Dashboard');
                    console.log('\nüìã SQL ÿßŸÑŸÖÿ∑ŸÑŸàÿ®:');
                    console.log(`
-- ÿ•ÿ∂ÿßŸÅÿ© ÿπŸÖŸàÿØ base_profit ÿ•ÿ∞ÿß ŸÑŸÖ ŸäŸÉŸÜ ŸÖŸàÿ¨ŸàÿØ
DO $$ 
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'installment_rules' 
        AND column_name = 'base_profit'
    ) THEN
        ALTER TABLE installment_rules ADD COLUMN base_profit NUMERIC(12,2);
        RAISE NOTICE 'ÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ© ÿπŸÖŸàÿØ base_profit';
    ELSE
        RAISE NOTICE 'ÿπŸÖŸàÿØ base_profit ŸÖŸàÿ¨ŸàÿØ ÿ®ÿßŸÑŸÅÿπŸÑ';
    END IF;
END $$;

-- ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖŸàÿ¨ŸàÿØÿ© ÿ®ÿ≠ÿ≥ÿßÿ® base_profit
UPDATE installment_rules 
SET base_profit = price_category * profit_target_percent
WHERE base_profit IS NULL;

-- ÿ¨ÿπŸÑ ÿßŸÑÿπŸÖŸàÿØ NOT NULL ÿ®ÿπÿØ ÿßŸÑÿ™ÿ≠ÿØŸäÿ´
ALTER TABLE installment_rules ALTER COLUMN base_profit SET NOT NULL;
                    `);
                } else {
                    console.log('‚úÖ ÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ© ÿπŸÖŸàÿØ base_profit ÿ®ŸÜÿ¨ÿßÿ≠');
                }
            }
        } else {
            console.log('‚ùå ÿ¨ÿØŸàŸÑ installment_rules ŸÅÿßÿ±ÿ∫');
        }

        // ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑŸÜÿ™Ÿäÿ¨ÿ©
        console.log('\nüîç ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑŸÜÿ™Ÿäÿ¨ÿ©:');
        const { data: finalData, error: finalError } = await supabase
            .from('installment_rules')
            .select('id, price_category, profit_target_percent, base_profit')
            .limit(3);

        if (finalError) {
            console.log('‚ùå ÿÆÿ∑ÿ£ ŸÅŸä ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑŸÜÿ™Ÿäÿ¨ÿ©:', finalError.message);
        } else {
            console.log('‚úÖ ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ÿßŸÑŸÖÿ≠ÿØÿ´ÿ©:');
            finalData.forEach((record, index) => {
                console.log(`ÿßŸÑÿ≥ÿ¨ŸÑ ${index + 1}:`);
                console.log(`  - id: ${record.id}`);
                console.log(`  - price_category: ${record.price_category}`);
                console.log(`  - profit_target_percent: ${record.profit_target_percent}`);
                console.log(`  - base_profit: ${record.base_profit}`);
                console.log('');
            });
        }

    } catch (error) {
        console.error('‚ùå ÿÆÿ∑ÿ£ ÿπÿßŸÖ:', error);
    }
}

addBaseProfitColumn(); 